// üìÅ src/pages/CartPage.jsx
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  fetchCartItems,
  fetchProductImage,
  decreaseCartItemQuantity,
  increaseCartItemQuantity,
  removeCartItemById,
  selectCartItem,
  checkoutCart,
} from "../../api/cartApi";
import CheckoutModal from "./CheckoutModal";
import "./CartPage.css";

const CartPage = () => {
  const [cartItems, setCartItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedItems, setSelectedItems] = useState(new Set());
  const [actionLoading, setActionLoading] = useState(new Set()); // Loading state cho t·ª´ng action
  const [checkoutLoading, setCheckoutLoading] = useState(false); // Loading state cho checkout
  const [showCheckoutModal, setShowCheckoutModal] = useState(false); // State cho modal checkout
  const navigate = useNavigate();

  useEffect(() => {
    const fetchCart = async () => {
      const token = localStorage.getItem("accessToken");
      if (!token) {
        setError("Ch∆∞a ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        navigate("/");
        return;
      }

      try {
        const data = await fetchCartItems(token);
        
        // Ki·ªÉm tra n·∫øu data kh√¥ng ph·∫£i array
        if (!Array.isArray(data)) {
          console.error("‚ùå Data kh√¥ng ph·∫£i array:", data);
          setError("D·ªØ li·ªáu gi·ªè h√†ng kh√¥ng h·ª£p l·ªá");
          return;
        }
        
        // Ki·ªÉm tra n·∫øu data r·ªóng
        if (data.length === 0) {
          console.log("üîç Gi·ªè h√†ng tr·ªëng");
          setCartItems([]);
          setSelectedItems(new Set());
          return;
        }
        
        const enriched = await Promise.all(
          data
            // .filter((item) => item.status === "ACTIVE")
            .map(async (item) => {
              try {
                const imageUrl = await fetchProductImage(item.productId);
                return {
                  ...item,
                  imageUrl,
                };
              } catch (imageError) {
                console.warn("‚ö†Ô∏è L·ªói t·∫£i ·∫£nh s·∫£n ph·∫©m:", imageError);
                return {
                  ...item,
                  imageUrl: "https://via.placeholder.com/150x150?text=No+Image",
                };
              }
            })
        );
        setCartItems(enriched);
        
        // Load selected items t·ª´ backend (n·∫øu c√≥) - d·ª±a tr√™n status CHECKED_OUT
        const selectedItemsFromBackend = enriched
          .filter(item => item.status === "CHECKED_OUT")
          .map(item => item.id);
        setSelectedItems(new Set(selectedItemsFromBackend));
      } catch (err) {
        console.error("‚ùå L·ªói load gi·ªè h√†ng:", err);
        setError(err.message || "Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
      } finally {
        setLoading(false);
      }
    };

    fetchCart();
  }, [navigate]);

  const handleIncreaseQuantity = async (cartItemId) => {
    setActionLoading(prev => new Set(prev).add(cartItemId));
    try {
      const token = localStorage.getItem("accessToken");
      await increaseCartItemQuantity(cartItemId, token);
      setCartItems((prev) =>
        prev.map((item) =>
          item.id === cartItemId ? { ...item, quantity: item.quantity + 1 } : item
        )
      );
    } catch (err) {
      console.error("‚ùå L·ªói tƒÉng s·ªë l∆∞·ª£ng:", err.message);
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho user
      alert(`L·ªói tƒÉng s·ªë l∆∞·ª£ng: ${err.message}`);
    } finally {
      setActionLoading(prev => {
        const newSet = new Set(prev);
        newSet.delete(cartItemId);
        return newSet;
      });
    }
  };

  const handleDecreaseQuantity = async (cartItemId) => {
    setActionLoading(prev => new Set(prev).add(cartItemId));
    try {
      const token = localStorage.getItem("accessToken");
      await decreaseCartItemQuantity(cartItemId, token);
      setCartItems((prev) =>
        prev.map((item) => {
          if (item.id === cartItemId) {
            const newQuantity = item.quantity - 1;
            // N·∫øu s·ªë l∆∞·ª£ng = 0, x√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch
            if (newQuantity <= 0) {
              return null; // S·∫Ω ƒë∆∞·ª£c filter ra
            }
            return { ...item, quantity: newQuantity };
          }
          return item;
        }).filter(Boolean) // Lo·∫°i b·ªè c√°c item null
      );
      
      // X√≥a kh·ªèi selected items n·∫øu s·∫£n ph·∫©m b·ªã x√≥a
      setSelectedItems((prev) => {
        const newSet = new Set(prev);
        newSet.delete(cartItemId);
        return newSet;
      });
    } catch (err) {
      console.error("‚ùå L·ªói gi·∫£m s·ªë l∆∞·ª£ng:", err.message);
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho user
      alert(`L·ªói gi·∫£m s·ªë l∆∞·ª£ng: ${err.message}`);
    } finally {
      setActionLoading(prev => {
        const newSet = new Set(prev);
        newSet.delete(cartItemId);
        return newSet;
      });
    }
  };

  const removeItem = async (cartItemId) => {
    setActionLoading(prev => new Set(prev).add(cartItemId));
    try {
      const token = localStorage.getItem("accessToken");
      await removeCartItemById(cartItemId, token);
      setCartItems((prev) => prev.filter((item) => item.id !== cartItemId));
      // X√≥a kh·ªèi selected items n·∫øu c√≥
      setSelectedItems((prev) => {
        const newSet = new Set(prev);
        newSet.delete(cartItemId);
        return newSet;
      });
    } catch (err) {
      console.error("‚ùå L·ªói xo√° s·∫£n ph·∫©m:", err.message);
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho user
      alert(`L·ªói x√≥a s·∫£n ph·∫©m: ${err.message}`);
    } finally {
      setActionLoading(prev => {
        const newSet = new Set(prev);
        newSet.delete(cartItemId);
        return newSet;
      });
    }
  };

  const handleSelectItem = async (cartItemId, selected) => {
    // T√¨m productId t·ª´ cartItem
    const cartItem = cartItems.find(item => item.id === cartItemId);
    if (!cartItem) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y cart item:", cartItemId);
      return;
    }

    // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
    setSelectedItems((prev) => {
      const newSet = new Set(prev);
      if (selected) {
        newSet.add(cartItemId);
      } else {
        newSet.delete(cartItemId);
      }
      console.log("‚úÖ C·∫≠p nh·∫≠t selectedItems:", Array.from(newSet));
      return newSet;
    });

    // Sau ƒë√≥ g·ªçi API (kh√¥ng block UI)
    const token = localStorage.getItem("accessToken");
    if (!token) {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ token, ch·ªâ c·∫≠p nh·∫≠t local state");
      return;
    }

    selectCartItem(cartItem.productId, selected, token)
      .then(() => {
        console.log("‚úÖ API call th√†nh c√¥ng");
      })
      .catch((err) => {
        console.error("‚ùå L·ªói ch·ªçn s·∫£n ph·∫©m:", err.message);
        // Revert UI n·∫øu API fail
        setSelectedItems((prev) => {
          const newSet = new Set(prev);
          if (selected) {
            newSet.delete(cartItemId);
          } else {
            newSet.add(cartItemId);
          }
          return newSet;
        });
        alert(`L·ªói ch·ªçn s·∫£n ph·∫©m: ${err.message}`);
      });
  };

  const handleSelectAll = async (selectAll) => {
    // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
    if (selectAll) {
      setSelectedItems(new Set(cartItems.map(item => item.id)));
    } else {
      setSelectedItems(new Set());
    }

    // Sau ƒë√≥ g·ªçi API (kh√¥ng block UI)
    const token = localStorage.getItem("accessToken");
    if (!token) {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ token, ch·ªâ c·∫≠p nh·∫≠t local state");
      return;
    }

    const promises = cartItems.map(item => 
      selectCartItem(item.productId, selectAll, token)
    );
    
    Promise.all(promises)
      .then(() => {
        console.log("‚úÖ API selectAll th√†nh c√¥ng");
      })
      .catch((err) => {
        console.error("‚ùå L·ªói ch·ªçn t·∫•t c·∫£:", err.message);
        // Revert UI n·∫øu API fail
        if (selectAll) {
          setSelectedItems(new Set());
        } else {
          setSelectedItems(new Set(cartItems.map(item => item.id)));
        }
        alert(`L·ªói ch·ªçn t·∫•t c·∫£: ${err.message}`);
      });
  };

  const totalPrice = cartItems.reduce(
    (sum, item) => {
      if (selectedItems.has(item.id)) {
        return sum + item.price * item.quantity;
      }
      return sum;
    },
    0
  );

  const selectedItemsCount = selectedItems.size;

  // Function ƒë·ªÉ checkout gi·ªè h√†ng
  const handleCheckout = async () => {
    if (selectedItemsCount === 0) {
      alert("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ ƒë·∫∑t h√†ng!");
      return;
    }

    const token = localStorage.getItem("accessToken");
    if (!token) {
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t h√†ng!");
      navigate("/login");
      return;
    }

    setCheckoutLoading(true);
    try {
      console.log("üõí B·∫Øt ƒë·∫ßu checkout gi·ªè h√†ng...");
      
      // G·ªçi API checkout
      const result = await checkoutCart(token);
      console.log("‚úÖ Checkout th√†nh c√¥ng:", result);
      
      // M·ªü modal ƒë·ªÉ nh·∫≠p th√¥ng tin ƒë·∫∑t h√†ng
      setShowCheckoutModal(true);
      
    } catch (error) {
      console.error("‚ùå L·ªói checkout:", error);
      alert(`L·ªói khi ƒë·∫∑t h√†ng: ${error.message}`);
    } finally {
      setCheckoutLoading(false);
    }
  };

  // Function x·ª≠ l√Ω khi checkout th√†nh c√¥ng
  const handleCheckoutSuccess = () => {
    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang Order History
    navigate("/");
  };

  // Debug: Log current state (ch·ªâ gi·ªØ l·∫°i khi c·∫ßn debug)
  // console.log("üîç Cart items count:", cartItems.length);

  return (
    <div className="cart-page-wrapper">
      {/* Header */}
      <header className="header">
        <div className="header-container">
          <div className="header-left">
            <div className="logo" onClick={() => navigate("/")}>
              <h1>üõçÔ∏è TechShop</h1>
            </div>
            <div className="cart-title-header">
              <span className="separator">|</span>
              <span className="cart-text">Gi·ªè h√†ng</span>
            </div>
          </div>
        </div>
      </header>

      <div className="cart-page">
        <div className="container">
          {loading && (
          <div className="loading">
            <div className="spinner"></div>
            <p>ƒêang t·∫£i gi·ªè h√†ng...</p>
          </div>
        )}
        
        {error && (
          <div className="error-message">
            <p>{error}</p>
            <button className="btn btn-primary" onClick={() => navigate("/")}>
              V·ªÅ trang ch·ªß
            </button>
          </div>
        )}
        
        {!loading && !error && cartItems.length === 0 && (
          <div className="empty-cart">
            <div className="empty-cart-icon">üõí</div>
            <h3>Gi·ªè h√†ng tr·ªëng</h3>
            <p>B·∫°n ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong gi·ªè h√†ng</p>
            <button className="btn btn-primary" onClick={() => navigate("/")}>
              Ti·∫øp t·ª•c mua s·∫Øm
            </button>
          </div>
        )}

        {!loading && cartItems.length > 0 && (
          <div className="cart-content">
            {/* Select All */}
            <div className="cart-select-all">
              <label className="select-all-label">
                <input
                  type="checkbox"
                  checked={selectedItems.size === cartItems.length && cartItems.length > 0}
                  onChange={(e) => handleSelectAll(e.target.checked)}
                  className="select-all-checkbox"
                  disabled={actionLoading.size > 0}
                />
                <span className="select-all-text">
                  Ch·ªçn t·∫•t c·∫£ ({cartItems.length} s·∫£n ph·∫©m)
                  {actionLoading.size > 0 && " ‚è≥"}
                </span>
              </label>
            </div>
            
            <div className="cart-items">
              {cartItems.map((item) => (
                <div className="cart-item" key={item.id}>
                  <div className="cart-item-select">
                    <input
                      type="checkbox"
                      checked={selectedItems.has(item.id)}
                      onChange={(e) => {
                        console.log("üîò Checkbox clicked:", item.id, e.target.checked);
                        handleSelectItem(item.id, e.target.checked);
                      }}
                      className="item-checkbox"
                      disabled={actionLoading.has(item.id)}
                    />
                  </div>
                  
                  <div className="cart-item-image">
                    {item.imageUrl === "/images/no-image.png" ? (
                      <div className="no-image-placeholder">üì±</div>
                    ) : (
                      <img src={item.imageUrl} alt={item.productName} />
                    )}
                  </div>
                  
                  <div className="cart-item-info">
                    <h4 className="cart-item-name">{item.productName}</h4>
                    <div className="cart-item-price">
                      <span className="price">{item.price.toLocaleString('vi-VN')} ‚Ç´</span>
                    </div>
                  </div>
                  
                  <div className="cart-item-quantity">
                    <div className="quantity-control">
                      <button 
                        className="qty-btn" 
                        onClick={() => handleDecreaseQuantity(item.id)}
                        disabled={item.quantity <= 1 || actionLoading.has(item.id)}
                      >
                        {actionLoading.has(item.id) ? "‚è≥" : "-"}
                      </button>
                      <span className="quantity">{item.quantity}</span>
                      <button 
                        className="qty-btn" 
                        onClick={() => handleIncreaseQuantity(item.id)}
                        disabled={actionLoading.has(item.id)}
                      >
                        {actionLoading.has(item.id) ? "‚è≥" : "+"}
                      </button>
                    </div>
                  </div>
                  
                  <div className="cart-item-total">
                    <span className="total-price">
                      {(item.price * item.quantity).toLocaleString('vi-VN')} ‚Ç´
                    </span>
                  </div>
                  
                  <div className="cart-item-actions">
                    <button 
                      className="remove-btn"
                      onClick={() => removeItem(item.id)}
                      disabled={actionLoading.has(item.id)}
                    >
                      {actionLoading.has(item.id) ? "‚è≥" : "üóëÔ∏è"}
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
        </div>
      </div>

      {!loading && cartItems.length > 0 && (
        <div className="cart-summary-fixed">
          <div className="cart-summary">
            <div className="summary-info">
              <h3>T·ªïng c·ªông: <span className="total-amount">{totalPrice.toLocaleString('vi-VN')} ‚Ç´</span></h3>
              <p className="item-count">{selectedItemsCount} s·∫£n ph·∫©m ƒë√£ ch·ªçn</p>
            </div>
            <div className="summary-actions">
              <button className="btn btn-secondary" onClick={() => navigate("/")}>
                Ti·∫øp t·ª•c mua s·∫Øm
              </button>
              <button 
                className="btn btn-primary checkout-btn"
                onClick={handleCheckout}
                disabled={selectedItemsCount === 0 || checkoutLoading}
              >
                {checkoutLoading ? "ƒêang x·ª≠ l√Ω..." : (selectedItemsCount === 0 ? "Ch·ªçn s·∫£n ph·∫©m" : "ƒê·∫∑t h√†ng")}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Checkout Modal */}
      <CheckoutModal
        isOpen={showCheckoutModal}
        onClose={() => setShowCheckoutModal(false)}
        onSuccess={handleCheckoutSuccess}
        selectedItems={cartItems.filter(item => selectedItems.has(item.id))}
      />
    </div>
  );
};

export default CartPage;
