import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { getMyInfo, changePassword } from "../../api/userApi";
import "../../styles/Header.css";
import "./ProfilePage.css";

const ProfilePage = () => {
  const [userInfo, setUserInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState("profile");
  const [changePasswordData, setChangePasswordData] = useState({
    currentPassword: "",
    newPassword: "",
    confirmPassword: ""
  });
  const [isChangingPassword, setIsChangingPassword] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem("accessToken");
    if (!token) {
      navigate("/login");
      return;
    }

    fetchUserInfo();
  }, [navigate]);

  const fetchUserInfo = async () => {
    try {
      setLoading(true);
      const response = await getMyInfo();
      setUserInfo(response.data);
    } catch (err) {
      console.error("‚ùå L·ªói l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", err);
      setError("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setLoading(false);
    }
  };

  const handlePasswordChange = async (e) => {
    e.preventDefault();
    
    if (changePasswordData.newPassword !== changePasswordData.confirmPassword) {
      alert("M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp!");
      return;
    }

    if (changePasswordData.newPassword.length < 6) {
      alert("M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!");
      return;
    }

    try {
      setIsChangingPassword(true);
      await changePassword({
        currentPassword: changePasswordData.currentPassword,
        newPassword: changePasswordData.newPassword
      });
      
      alert("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
      setChangePasswordData({
        currentPassword: "",
        newPassword: "",
        confirmPassword: ""
      });
    } catch (err) {
      console.error("‚ùå L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", err);
      alert("‚ùå ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i: " + (err.response?.data?.message || err.message));
    } finally {
      setIsChangingPassword(false);
    }
  };

  const handleLogout = () => {
    localStorage.removeItem("accessToken");
    localStorage.removeItem("refreshToken");
    alert("ƒêƒÉng xu·∫•t th√†nh c√¥ng!");
    navigate("/");
  };

  if (loading) {
    return (
      <div className="profile-page-wrapper">
        <div className="loading">
          <div className="spinner"></div>
          <p>ƒêang t·∫£i th√¥ng tin t√†i kho·∫£n...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="profile-page-wrapper">
        <div className="error-message">
          <p>{error}</p>
          <button className="btn btn-primary" onClick={fetchUserInfo}>
            Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="profile-page-wrapper">
      {/* Header */}
      <header className="header">
        <div className="header-container">
          <div className="logo" onClick={() => navigate("/")}>
            <h1>üõçÔ∏è TechShop</h1>
          </div>
          
          <nav className="nav">
            <a href="/" className="nav-link">Trang ch·ªß</a>
            <a href="/#products" className="nav-link">S·∫£n ph·∫©m</a>
            <a href="/#categories" className="nav-link">Danh m·ª•c</a>
            <a href="/#about" className="nav-link">Gi·ªõi thi·ªáu</a>
            <a href="/#contact" className="nav-link">Li√™n h·ªá</a>
          </nav>

          <div className="header-actions">
            <button className="btn btn-cart" onClick={() => navigate("/cart")}>
              üõí Gi·ªè h√†ng
            </button>
            <button className="btn btn-logout" onClick={handleLogout}>
              üö™ ƒêƒÉng xu·∫•t
            </button>
          </div>
        </div>
      </header>

      <div className="profile-page">
        <div className="container">
          <div className="profile-content">
            {/* Sidebar Navigation */}
            <div className="sidebar">
              <div className="sidebar-section">
                {/* User Profile Header */}
                <div className="user-profile-header">
                  <div className="user-avatar">
                    <div className="avatar-circle">
                      {userInfo?.firstName?.charAt(0)?.toUpperCase() || "U"}
                    </div>
                  </div>
                  <div className="user-info">
                    <div className="username-section">
                      <span className="username">{userInfo?.username || "User"}</span>
                      <button className="edit-profile-btn">
                        <span className="edit-icon">‚úèÔ∏è</span>
                        <span className="edit-text">S·ª≠a H·ªì S∆°</span>
                      </button>
                    </div>
                  </div>
                </div>

                {/* Navigation Menu */}
                <ul className="sidebar-menu">
                  <li className="sidebar-item">
                    <button className="sidebar-btn">
                      <span className="icon">üîî</span>
                      <span className="text">Th√¥ng B√°o</span>
                    </button>
                  </li>
                  <li className={`sidebar-item ${activeTab === "profile" ? "active" : ""}`}>
                    <button 
                      className="sidebar-btn"
                      onClick={() => setActiveTab("profile")}
                    >
                      <span className="icon">üë§</span>
                      <span className="text">T√†i Kho·∫£n C·ªßa T√¥i</span>
                    </button>
                  </li>
                  <li className={`sidebar-item ${activeTab === "orders" ? "active" : ""}`}>
                    <button 
                      className="sidebar-btn"
                      onClick={() => setActiveTab("orders")}
                    >
                      <span className="icon">üìã</span>
                      <span className="text">ƒê∆°n Mua</span>
                    </button>
                  </li>
                </ul>
              </div>
            </div>

            {/* Main Content */}
            <div className="main-content">
              {activeTab === "profile" && (
                <>
                  <div className="content-header">
                    <h2 className="content-title">T√†i Kho·∫£n C·ªßa T√¥i</h2>
                  </div>
                  <div className="content-body">
                    <div className="profile-info">
                      <div className="info-section">
                        <h3 className="section-title">Th√¥ng tin c√° nh√¢n</h3>
                        <div className="info-grid">
                          <div className="info-item">
                            <label className="info-label">T√™n ƒëƒÉng nh·∫≠p</label>
                            <span className="info-value">{userInfo?.username}</span>
                          </div>
                          <div className="info-item">
                            <label className="info-label">Email</label>
                            <span className="info-value">{userInfo?.email}</span>
                          </div>
                          <div className="info-item">
                            <label className="info-label">H·ªç v√† t√™n</label>
                            <span className="info-value">{userInfo?.firstName} {userInfo?.lastName}</span>
                          </div>
                          <div className="info-item">
                            <label className="info-label">S·ªë ƒëi·ªán tho·∫°i</label>
                            <span className="info-value">{userInfo?.phoneNumber || "Ch∆∞a c·∫≠p nh·∫≠t"}</span>
                          </div>
                          <div className="info-item">
                            <label className="info-label">Vai tr√≤</label>
                            <span className="info-value">{userInfo?.roles?.join(", ") || "USER"}</span>
                          </div>
                          <div className="info-item">
                            <label className="info-label">Ng√†y t·∫°o</label>
                            <span className="info-value">{new Date(userInfo?.createdAt).toLocaleDateString('vi-VN')}</span>
                          </div>
                        </div>
                      </div>

                      <div className="info-section">
                        <h3 className="section-title">B·∫£o m·∫≠t</h3>
                        <form onSubmit={handlePasswordChange} className="password-form">
                          <div className="form-group">
                            <label htmlFor="currentPassword" className="form-label">M·∫≠t kh·∫©u hi·ªán t·∫°i *</label>
                            <input
                              type="password"
                              id="currentPassword"
                              className="form-input"
                              value={changePasswordData.currentPassword}
                              onChange={(e) => setChangePasswordData(prev => ({
                                ...prev,
                                currentPassword: e.target.value
                              }))}
                              required
                            />
                          </div>

                          <div className="form-group">
                            <label htmlFor="newPassword" className="form-label">M·∫≠t kh·∫©u m·ªõi *</label>
                            <input
                              type="password"
                              id="newPassword"
                              className="form-input"
                              value={changePasswordData.newPassword}
                              onChange={(e) => setChangePasswordData(prev => ({
                                ...prev,
                                newPassword: e.target.value
                              }))}
                              required
                            />
                          </div>

                          <div className="form-group">
                            <label htmlFor="confirmPassword" className="form-label">X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi *</label>
                            <input
                              type="password"
                              id="confirmPassword"
                              className="form-input"
                              value={changePasswordData.confirmPassword}
                              onChange={(e) => setChangePasswordData(prev => ({
                                ...prev,
                                confirmPassword: e.target.value
                              }))}
                              required
                            />
                          </div>

                          <button 
                            type="submit" 
                            className="btn btn-primary"
                            disabled={isChangingPassword}
                          >
                            {isChangingPassword ? "‚è≥ ƒêang x·ª≠ l√Ω..." : "üîí ƒê·ªïi m·∫≠t kh·∫©u"}
                          </button>
                        </form>
                      </div>
                    </div>
                  </div>
                </>
              )}

              {activeTab === "orders" && (
                <>
                  <div className="content-header">
                    <h2 className="content-title">ƒê∆°n Mua</h2>
                  </div>
                  <div className="content-body">
                    {/* Order Status Tabs */}
                    <div className="order-tabs">
                      <button className="order-tab active">T·∫•t c·∫£</button>
                      <button className="order-tab">Ch·ªù thanh to√°n</button>
                      <button className="order-tab">V·∫≠n chuy·ªÉn</button>
                      <button className="order-tab">Ch·ªù giao h√†ng</button>
                      <button className="order-tab">Ho√†n th√†nh</button>
                      <button className="order-tab">ƒê√£ h·ªßy</button>
                      <button className="order-tab">Tr·∫£ h√†ng/Ho√†n ti·ªÅn</button>
                    </div>

                    {/* Search Bar */}
                    <div className="search-section">
                      <div className="search-bar">
                        <span className="search-icon">üîç</span>
                        <input 
                          type="text" 
                          placeholder="B·∫°n c√≥ th·ªÉ t√¨m ki·∫øm theo t√™n Shop, ID ƒë∆°n h√†ng ho·∫∑c T√™n S·∫£n ph·∫©m"
                          className="search-input"
                        />
                      </div>
                    </div>

                    {/* Empty Orders */}
                    <div className="empty-orders">
                      <div className="empty-icon">üìã</div>
                      <h4>Ch∆∞a c√≥ ƒë∆°n h√†ng</h4>
                      <p>B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o. H√£y mua s·∫Øm ƒë·ªÉ c√≥ ƒë∆°n h√†ng ƒë·∫ßu ti√™n!</p>
                      <button className="btn btn-primary" onClick={() => navigate("/")}>
                        Mua s·∫Øm ngay
                      </button>
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Chat Button */}
      <div className="chat-button">
        <button className="chat-btn">
          <span className="chat-icon">üí¨</span>
          <span className="chat-text">Chat</span>
        </button>
      </div>
    </div>
  );
};

export default ProfilePage; 