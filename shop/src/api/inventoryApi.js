import { createAxiosInstance } from './axiosInstance';
import { getAllProducts } from './productApi';

const inventoryApi = createAxiosInstance({
  baseURL: (typeof window !== 'undefined' ? window.location.origin : '') + '/api/v1/inventory-items',
});



// L·∫•y th√¥ng tin t·ªìn kho c·ªßa m·ªôt s·∫£n ph·∫©m theo productId
export const getInventoryByProductId = async (productId) => {
  try {
    const response = await inventoryApi.get(`/product/${productId}`);
    return response;
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng tin t·ªìn kho:', error);
    throw error;
  }
};

// L·∫•y s·ªë l∆∞·ª£ng c√≥ s·∫µn c·ªßa m·ªôt s·∫£n ph·∫©m
export const getAvailableQuantity = async (productId) => {
  try {
    const response = await inventoryApi.get(`/products/${productId}/available-quantity`);
    return response;
  } catch (error) {
    console.error('L·ªói khi l·∫•y s·ªë l∆∞·ª£ng c√≥ s·∫µn:', error);
    throw error;
  }
};

// L·∫•y s·ªë l∆∞·ª£ng ƒë√£ b√°n c·ªßa m·ªôt s·∫£n ph·∫©m
export const getSoldQuantity = async (productId) => {
  try {
    const response = await inventoryApi.get(`/products/${productId}/sold-quantity`);
    return response;
  } catch (error) {
    console.error('L·ªói khi l·∫•y s·ªë l∆∞·ª£ng ƒë√£ b√°n:', error);
    throw error;
  }
};

// L·∫•y t·∫•t c·∫£ th√¥ng tin t·ªìn kho
export const getAllInventoryItems = async () => {
  try {
    // G·ªçi tr·ª±c ti·∫øp API inventory service ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
    console.log('üîÑ L·∫•y danh s√°ch inventory t·ª´ inventory service...');
    const response = await inventoryApi.get('/all');
    console.log('üì¶ Inventory service response:', response);
    
    const inventoryItems = response.data || response;
    console.log('üì¶ Inventory data:', inventoryItems);
    console.log('üì¶ Inventory count:', inventoryItems.length);
    
    return inventoryItems;
    
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y inventory t·ª´ inventory service:', error);
    console.log('‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu inventory');
    return { data: [] };
  }
};

// L·∫•y danh s√°ch s·∫£n ph·∫©m c√≥ s·∫µn
export const getAvailableInventoryItems = async () => {
  try {
    const response = await inventoryApi.get('/available');
    return response;
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m c√≥ s·∫µn:', error);
    throw error;
  }
};

// L·∫•y danh s√°ch s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng
export const getLowStockItems = async () => {
  try {
    const response = await inventoryApi.get('/low-stock');
    return response;
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng:', error);
    throw error;
  }
};

// L·∫•y danh s√°ch s·∫£n ph·∫©m c·∫ßn ƒë·∫∑t h√†ng l·∫°i
export const getItemsNeedingReorder = async () => {
  try {
    const response = await inventoryApi.get('/needing-reorder');
    return response;
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m c·∫ßn ƒë·∫∑t h√†ng:', error);
    throw error;
  }
};

// Nh·∫≠p kho cho s·∫£n ph·∫©m
export const importStock = async (productId, stockData, token) => {
  try {
    console.log('Importing stock with data:', { productId, stockData, token: token ? 'Bearer ***' : 'No token' });
    
    // G·ªçi API inventory service ƒë·ªÉ nh·∫≠p kho
    console.log('üîÑ G·ªçi API inventory service ƒë·ªÉ nh·∫≠p kho...');
    const response = await inventoryApi.post(`/${productId}`, stockData, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    });
    
    console.log('‚úÖ ƒê√£ nh·∫≠p kho th√†nh c√¥ng:', response);
    return response;
  } catch (error) {
    console.error('L·ªói khi nh·∫≠p kho:', error);
    console.error('Error response:', error.response?.data);
    console.error('Error status:', error.response?.status);
    throw error;
  }
}; 