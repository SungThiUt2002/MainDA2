// File: src/api/orderApi.js
import { createAxiosInstance } from "./axiosInstance";

const axiosOrder = createAxiosInstance({
  baseURL: "http://localhost:9011/apis/v1/users/orders",
  headers: {
    "Content-Type": "application/json",
  },
});

const axiosOrderAdmin = createAxiosInstance({
  baseURL: "http://localhost:9011/apis/v1/admin/orders",
  headers: {
    "Content-Type": "application/json",
  },
});

const axiosAccount = createAxiosInstance({
  baseURL: "http://localhost:9003/api",
  headers: {
    "Content-Type": "application/json",
  },
});

// ‚úÖ L·∫•y ƒë∆°n h√†ng m·ªõi nh·∫•t sau khi checkout
export const getLatestOrder = async (token) => {
  try {
    // Th√™m timestamp ƒë·ªÉ tr√°nh cache
    const timestamp = Date.now();
    const res = await axiosOrder.get(`/latest?t=${timestamp}`);
    console.log("üîç API call timestamp:", timestamp);
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói API getLatestOrder:", err?.response?.data || err.message);
    throw err;
  }
};

// ‚úÖ L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa user (cho l·ªãch s·ª≠ ƒë∆°n h√†ng)
export const getUserOrders = async (token) => {
  try {
    const res = await axiosOrder.get("/history");
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói API getUserOrders:", err?.response?.data || err.message);
    throw err;
  }
};

// ========== ADMIN ORDER APIs ==========

// L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng ch·ªù x√°c nh·∫≠n (PENDING_CONFIRMATION)
export const getPendingConfirmationOrders = async (token) => {
  try {
    const res = await axiosOrderAdmin.get("/pending-confirmation", {
      headers: { Authorization: `Bearer ${token}` }
    });
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói API getPendingConfirmationOrders:", err?.response?.data || err.message);
    throw err;
  }
};

// L·∫•y chi ti·∫øt ƒë∆°n h√†ng theo ID
export const getOrderById = async (orderId, token) => {
  try {
    const res = await axiosOrderAdmin.get(`/${orderId}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói API getOrderById:", err?.response?.data || err.message);
    throw err;
  }
};

// L·∫•y ƒë∆°n h√†ng theo tr·∫°ng th√°i
export const getOrdersByStatus = async (status, token) => {
  try {
    const res = await axiosOrderAdmin.get(`/status/${status}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói API getOrdersByStatus:", err?.response?.data || err.message);
    throw err;
  }
};

// L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
export const getAllOrders = async (token) => {
  try {
    const res = await axiosOrderAdmin.get("/all", {
      headers: { Authorization: `Bearer ${token}` }
    });
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói API getAllOrders:", err?.response?.data || err.message);
    throw err;
  }
};

// Admin x√°c nh·∫≠n ƒë∆°n h√†ng COD
export const adminConfirmOrder = async (orderId, token) => {
  try {
    const res = await axiosOrderAdmin.put(`/${orderId}/confirm`, {}, {
      headers: { Authorization: `Bearer ${token}` }
    });
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói API adminConfirmOrder:", err?.response?.data || err.message);
    throw err;
  }
};

// L·∫•y t·ªïng s·ªë ƒë∆°n h√†ng - cho Admin Dashboard
export const getTotalOrderCount = async (token) => {
  try {
    console.log("üîÑ G·ªçi API getTotalOrderCount v·ªõi token:", token ? "C√≥ token" : "Kh√¥ng c√≥ token");
    console.log("üîÑ URL ƒë·∫ßy ƒë·ªß:", "http://localhost:9011/apis/v1/admin/orders/count");
    
    // Kh√¥ng c·∫ßn th√™m Authorization header v√¨ axiosInstance ƒë√£ t·ª± ƒë·ªông th√™m
    const res = await axiosOrderAdmin.get("/count");
    
    console.log("‚úÖ Response t·ª´ API getTotalOrderCount:", res.data);
    console.log("‚úÖ Response structure:", JSON.stringify(res.data, null, 2));
    console.log("‚úÖ Response status:", res.status);
    console.log("‚úÖ Response headers:", res.headers);
    
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói API getTotalOrderCount:", err?.response?.data || err.message);
    console.error("‚ùå Error status:", err?.response?.status);
    console.error("‚ùå Error details:", err);
    throw err;
  }
};

// ‚úÖ L·∫•y danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n
export const getPaymentMethods = async () => {
  try {
    const res = await axiosOrder.get("/payment-methods");
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói API getPaymentMethods:", err?.response?.data || err.message);
    throw err;
  }
};

// ‚úÖ L·∫•y danh s√°ch ƒë·ªãa ch·ªâ c·ªßa user t·ª´ account-service
export const getUserAddresses = async () => {
  try {
    console.log("üîÑ G·ªçi API getUserAddresses...");
    
    // L·∫•y userId t·ª´ token
    const token = localStorage.getItem("accessToken");
    if (!token) {
      throw new Error("Kh√¥ng c√≥ token");
    }
    
    // Decode JWT token ƒë·ªÉ l·∫•y userId
    let userId;
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      userId = payload.userId;
      
      console.log("üîÑ Token payload:", payload);
      console.log("üîÑ UserId t·ª´ token:", userId);
      
      if (!userId) {
        throw new Error("Kh√¥ng t√¨m th·∫•y userId trong token");
      }
    } catch (decodeError) {
      console.error("‚ùå L·ªói decode token:", decodeError);
      throw new Error("Token kh√¥ng h·ª£p l·ªá");
    }
    
    const res = await axiosAccount.get(`/address/all/${userId}`);
    console.log("‚úÖ Response t·ª´ API getUserAddresses:", res.data);
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói API getUserAddresses:", err?.response?.data || err.message);
    throw err;
  }
};

// ‚úÖ T·∫°o ƒë·ªãa ch·ªâ m·ªõi t·ª´ account-service
export const createAddress = async (addressData) => {
  try {
    console.log("üîÑ G·ªçi API createAddress...");
    
    // L·∫•y token ƒë·ªÉ g·ª≠i trong header
    const token = localStorage.getItem("accessToken");
    if (!token) {
      throw new Error("Kh√¥ng c√≥ token");
    }
    
    const res = await axiosAccount.post("/address", addressData);
    console.log("‚úÖ Response t·ª´ API createAddress:", res.data);
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói API createAddress:", err?.response?.data || err.message);
    throw err;
  }
};

// ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng (ƒë·ªãa ch·ªâ giao h√†ng, ph∆∞∆°ng th·ª©c thanh to√°n)
export const updateOrderInfo = async (orderId, orderInfo, token) => {
  try {
    const res = await axiosOrder.put(`/${orderId}/info`, orderInfo);
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói API updateOrderInfo:", err?.response?.data || err.message);
    throw err;
  }
};

// ‚úÖ X√°c nh·∫≠n ƒë∆°n h√†ng
export const confirmOrder = async (orderId, token) => {
  try {
    await axiosOrder.put(`/${orderId}/confirm`, {});
  } catch (err) {
    console.error("‚ùå L·ªói API confirmOrder:", err?.response?.data || err.message);
    throw err;
  }
};

// ‚úÖ H·ªßy ƒë∆°n h√†ng
export const cancelOrder = async (orderId, token) => {
  try {
    await axiosOrder.put(`/${orderId}/cancel`, {});
  } catch (err) {
    console.error("‚ùå L·ªói API cancelOrder:", err?.response?.data || err.message);
    throw err;
  }
}; 