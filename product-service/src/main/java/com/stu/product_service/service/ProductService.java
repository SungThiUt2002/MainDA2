package com.stu.product_service.service;

import com.stu.common_dto.event.ProductEvent.ProductCreatEvent;
import com.stu.common_dto.event.ProductEvent.ProductDeleteEvent;
import com.stu.common_dto.event.ProductEvent.ProductUpdateEvent;
import com.stu.product_service.dto.request.CreateProductRequest;
import com.stu.product_service.dto.request.SearchProductRequest;
import com.stu.product_service.dto.request.UpdateProductRequest;
import com.stu.product_service.entity.*;
import com.stu.product_service.event.producers.ProductEventPublisher;
import com.stu.product_service.exception.ErrorCode;
import com.stu.product_service.exception.ProductServiceException;
import com.stu.product_service.mapper.ProductMapper;
import com.stu.product_service.repository.CategoryRepository;
import com.stu.product_service.repository.ProductRepository;
import com.stu.product_service.repository.ProductSearchSpecification;
import com.stu.product_service.repository.BrandRepository;

import com.stu.product_service.security.JwtUtil;
import com.stu.product_service.entity.TokenBlacklistCache;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

@Service
@RequiredArgsConstructor
public class ProductService {
    private final ProductRepository productRepository;
    private final CategoryRepository categoryRepository;
    private final BrandRepository brandRepository;
    private final ProductMapper productMapper;
    private final ProductEventPublisher productEventPublisher;
    private final JwtUtil jwtUtil;
    private final TokenBlacklistCache tokenBlacklistCache;
    private final ProductSearchSpecification productSearchSpecification;

    // 1. taÃ£o saÃân ph√¢Ãâm (admin)
    public Product createProduct(CreateProductRequest request, String token) {

        // 0. X√°c th·ª±c token
        if (token != null && token.startsWith("Bearer ")) {
            token = token.substring(7).trim();
        }
        if (jwtUtil.isTokenExpired(token)) {
            throw new ProductServiceException(ErrorCode.UNAUTHENTICATED, "Token h·∫øt h·∫°n");
        }

        // Ki·ªÉm tra token blacklist
        String jti = jwtUtil.extractJti(token);
        if (tokenBlacklistCache.contains(jti)) {
            throw new ProductServiceException(ErrorCode.UNAUTHENTICATED, "Token ƒë√£ b·ªã thu h·ªìi");
        }

        //1. ki√™Ãâm tra xem t√™n saÃân ph√¢Ãâm ƒëaÃÉ t√¥ÃÄn taÃ£i ch∆∞a --> ƒëaÃâm baÃâo t√™n kh√¥ng truÃÄng nhau
        if (productRepository.existsByName(request.getName()))
            throw new ProductServiceException(ErrorCode.PRODUCT_ALREADY_EXISTS);

        // 2. Ki√™Ãâm tra xem id danh muÃ£c coÃÅ t√¥ÃÄn taÃ£i kh√¥ng (ƒëaÃâm baÃâo d∆∞ÃÉ li√™Ã£u ƒë√¢ÃÄu vaÃÄo)
        Category category = categoryRepository.findById(request.getCategoryId())
                .orElseThrow(() -> new ProductServiceException(ErrorCode.CATEGORY_NOT_FOUND));

        // 3.Brand coÃÅ th√™Ãâ ƒë√™Ãâ tr√¥ÃÅng (n√™ÃÅu kh√¥ng thu√¥Ã£c brand naÃÄo)
        // N√™ÃÅu brand maÃÄ kh√¥ng tr√¥ÃÅng thiÃÄ phaÃâi ƒëaÃâm baÃâo brand ƒëaÃÉ t√¥ÃÄn taÃ£i
        Brand brand = null;
        if (request.getBrandId() != null) {
            brand = brandRepository.findById(request.getBrandId())
                    .orElseThrow(() -> new ProductServiceException(ErrorCode.BRAND_NOT_FOUND));
        }
        // L∆∞u vaÃÄo d∆∞ÃÉ li√™Ã£u
        Product product = productMapper.toEntity(request);
        product.setCategory(category);
        product.setBrand(brand);
        product.setCreatedAt(LocalDateTime.now());
        Product saved = productRepository.save(product);

        // g∆∞Ãâi event, hoƒÉÃ£c goÃ£i api ƒë√™Ãâ taÃ£o saÃân ph√¢Ãâm trong kho t∆∞∆°ng ∆∞ÃÅng
        ProductCreatEvent event = new ProductCreatEvent();
            event.setProductId(saved.getId());
            event.setProductName(saved.getName());
        productEventPublisher.sendProductCreateEvent(event);

        return saved;
    }

    //2. update saÃân ph√¢Ãâm (admin)
    // update theo id
    public Product updateProduct(Long id, UpdateProductRequest request,String token) {

        //0. X√°c th·ª±c token
        if (token != null && token.startsWith("Bearer ")) {
            token = token.substring(7).trim();
        }
        if (jwtUtil.isTokenExpired(token)) {
            throw new ProductServiceException(ErrorCode.UNAUTHENTICATED, "Token h·∫øt h·∫°n");
        }

        // 1.Ki·ªÉm tra token blacklist
        String jti = jwtUtil.extractJti(token);
        if (tokenBlacklistCache.contains(jti)) {
            throw new ProductServiceException(ErrorCode.UNAUTHENTICATED, "Token ƒë√£ b·ªã thu h·ªìi");
        }

        Long userId = jwtUtil.extractUserId(token);

        //2. ki√™Ãâm tra xem id saÃân ph√¢Ãâm ƒëaÃÉ t√¥ÃÄn taÃ£i ch∆∞a, n√™ÃÅu ch∆∞a ƒë∆∞a ra ngoaÃ£i l√™Ã£ vaÃÄ kh√¥ng th√™Ãâ update
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new ProductServiceException(ErrorCode.PRODUCT_NOT_FOUND));
        productMapper.updateProductFromDto(request, product);

        // 3.update t√™n saÃân ph√¢Ãâm(n√™ÃÅu coÃÅ)
        if (request.getName() != null)
        {
            product.setName(request.getName());
        }

        // 4. update giaÃÅ saÃân ph√¢Ãâm (n√™ÃÅu coÃÅ)
        if (request.getPrice() != null){
            product.setPrice(request.getPrice());
        }

        // 5. update danh muÃ£c cuÃâa saÃân ph√¢Ãâm
        if (request.getCategoryId() != null) {
            Category category = categoryRepository.findById(request.getCategoryId())
                    .orElseThrow(() -> new ProductServiceException(ErrorCode.CATEGORY_NOT_FOUND));
            product.setCategory(category);
        }

        // 6. update brand cuÃâa saÃân ph√¢Ãâm
        if (request.getBrandId() != null) {
            Brand brand = brandRepository.findById(request.getBrandId())
                    .orElseThrow(() -> new ProductServiceException(ErrorCode.BRAND_NOT_FOUND));
            product.setBrand(brand);
        }

        // 7. L∆∞u k√™ÃÅt quaÃâ
        productMapper.updateProductFromDto(request,product); // duÃÄng mapper
        product.setUpdatedAt(LocalDateTime.now());
        Product updated = productRepository.save(product);

        // 8. g∆∞Ãâi event hoƒÉÃ£c api ƒë√™Ãâ update saÃân ph√¢Ãâm trong kho, trong gioÃâ haÃÄng
        ProductUpdateEvent event = new ProductUpdateEvent();
            event.setProductId(id);
            event.setProductName(updated.getName());
            event.setNewPrice(updated.getPrice());
            event.setIsActive(updated.getIsActive());
            productEventPublisher.sendProductUpdateEvent(event);
        return updated;
    }
    

    //3. xoÃÅa saÃân ph√¢Ãâm (admin)
    @Transactional
    public void deleteProduct(Long productId) {

        // 1. Ki√™Ãâm tra saÃân ph√¢Ãâm ƒëaÃÉ t√¥ÃÄn taÃ£i ch∆∞a --> n√™ÃÅu ch∆∞a kh√¥ng th√™Ãâ xoÃÅa
        Product product = productRepository.findById(productId)
                .orElseThrow(() -> new ProductServiceException(ErrorCode.PRODUCT_NOT_FOUND));

        // 2.X√≥a product
        productRepository.deleteById(productId);

        // XoÃÅa aÃânh cuÃâa product t∆∞∆°ng ∆∞ÃÅng

        // 3. G∆∞Ãâi event ƒëeÃâ xoÃÅa saÃân ph√¢Ãâm trong kho, gioÃâ haÃÄng
        ProductDeleteEvent productEvent = ProductDeleteEvent.builder()
                .productId(productId)
                .reason("Product deleted")
                .build();
        productEventPublisher.sendProductDeleteEvent(productEvent);
    }

    // 4.l√¢ÃÅy toaÃÄn b√¥Ã£ saÃân ph√¢Ãâm
    public List<Product> getAllProducts() {
        try {
            return productRepository.findAll();
        } catch (Exception e) {
            e.printStackTrace();
            throw new ProductServiceException(ErrorCode.INTERNAL_SERVER_ERROR, "L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m: " + e.getMessage());
        }
    }

    //5. l√¢ÃÅy t√¢ÃÅt caÃâ saÃân ph√¢Ãâm theo danh muÃ£c
    public List<Product> getProductsByCategory(Long categoryId) {
        Category category = categoryRepository.findById(categoryId)
                .orElseThrow(() -> new ProductServiceException(ErrorCode.CATEGORY_NOT_FOUND));
        List<Product> products = productRepository.findByCategoryId(categoryId);
        return products;
    }

    //6. hi√™Ã£n chi ti√™ÃÅt m√¥Ã£t saÃân
    public Product getProductById(Long id) {
        Product product = productRepository.findById(id)
                .orElseThrow(() -> new ProductServiceException(ErrorCode.PRODUCT_NOT_FOUND));
        return product;
    }

    // LoÃ£c product theo Brand
    public List<Product> getProductByBrand( Long brandId){
        Brand brand=  brandRepository.findById(brandId)
                .orElseThrow(()-> new ProductServiceException(ErrorCode.BRAND_NOT_FOUND));

        List<Product> products = productRepository.findByBrandId(brandId);
        return products;
    }

    // ==================== üîç ADVANCED SEARCH & FILTER METHODS ====================

    /**
     * üîç T√¨m ki·∫øm s·∫£n ph·∫©m v·ªõi advanced filters v√† pagination
     */
    public Page<Product> searchProducts(SearchProductRequest request) {
        try {
            // T·∫°o specification cho search v√† filter
            Specification<Product> searchSpec = productSearchSpecification.buildSpecification(request);
            Specification<Product> sortSpec = productSearchSpecification.addSorting(request);
            
            // Combine specifications
            Specification<Product> combinedSpec = Specification.where(searchSpec).and(sortSpec);
            
            // T·∫°o Pageable cho pagination
            Pageable pageable = PageRequest.of(request.getPage(), request.getSize());
            
            // Th·ª±c hi·ªán search v·ªõi pagination
            return productRepository.findAll(combinedSpec, pageable);
            
        } catch (Exception e) {
            throw new ProductServiceException(ErrorCode.INTERNAL_SERVER_ERROR, 
                "L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m: " + e.getMessage());
        }
    }

    /**
     * üìä L·∫•y danh s√°ch categories cho filter dropdown
     */
    public List<String> getDistinctCategories() {
        try {
            return productRepository.findDistinctCategoryNames();
        } catch (Exception e) {
            throw new ProductServiceException(ErrorCode.INTERNAL_SERVER_ERROR, 
                "L·ªói khi l·∫•y danh s√°ch categories: " + e.getMessage());
        }
    }

    /**
     * üìä L·∫•y danh s√°ch brands cho filter dropdown
     */
    public List<String> getDistinctBrands() {
        try {
            return productRepository.findDistinctBrandNames();
        } catch (Exception e) {
            throw new ProductServiceException(ErrorCode.INTERNAL_SERVER_ERROR, 
                "L·ªói khi l·∫•y danh s√°ch brands: " + e.getMessage());
        }
    }

    /**
     * üí∞ L·∫•y kho·∫£ng gi√° min-max cho price range filter
     */
    public Map<String, BigDecimal> getPriceRange() {
        try {
            Object[] result = productRepository.getPriceRange();
            Map<String, BigDecimal> priceRange = new HashMap<>();
            
            if (result != null && result.length >= 2) {
                priceRange.put("minPrice", (BigDecimal) result[0]);
                priceRange.put("maxPrice", (BigDecimal) result[1]);
            } else {
                priceRange.put("minPrice", BigDecimal.ZERO);
                priceRange.put("maxPrice", BigDecimal.ZERO);
            }
            
            return priceRange;
        } catch (Exception e) {
            throw new ProductServiceException(ErrorCode.INTERNAL_SERVER_ERROR, 
                "L·ªói khi l·∫•y kho·∫£ng gi√°: " + e.getMessage());
        }
    }

    /**
     * üîç T√¨m ki·∫øm ƒë∆°n gi·∫£n theo keyword
     */
    public List<Product> searchByKeyword(String keyword) {
        try {
            if (keyword == null || keyword.trim().isEmpty()) {
                return getAllProducts();
            }
            return productRepository.searchByKeyword(keyword.trim());
        } catch (Exception e) {
            throw new ProductServiceException(ErrorCode.INTERNAL_SERVER_ERROR, 
                "L·ªói khi t√¨m ki·∫øm theo keyword: " + e.getMessage());
        }
    }

        /**
     * üìä ƒê·∫øm t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
     */
    public Long getTotalProductCount() {
        try {
            return productRepository.count();
        } catch (Exception e) {
            throw new ProductServiceException(ErrorCode.INTERNAL_SERVER_ERROR, 
                "L·ªói khi ƒë·∫øm t·ªïng s·ªë s·∫£n ph·∫©m: " + e.getMessage());
        }
    }

} 